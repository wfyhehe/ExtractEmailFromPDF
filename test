@list_route(methods=['POST'], permission_classes=[IsAuthenticated, CannotSubmitAfterContestEnded])
def submit(self, request):
    if 'language' not in request.data or 'code' not in request.data:
        return Response({
            'message': 'Language and code are necessary when submitted.'
        }, status=status.HTTP_400_BAD_REQUEST
        )

    problem = Problem.cached_objects.get(id=request.data.get('problem_id'))
    user = request.user
    if _is_submit_out_of_limit(request, 'user'):
        return Response({
            'message': _('You submitted too fast, please wait a minute :)'),
        }, status=status.HTTP_429_TOO_MANY_REQUESTS)

    submission_params = {
        'user': user,
        'language': request.data['language'],
        'problem_id': problem.id,
        'code': request.data['code'],
        'code_length': len(request.data['code']),
        'session': user.profile.session
    }

    is_test_submission = 'is_test_submission' in request.data
    if is_test_submission:
        submission_params['input'] = request.data.get('input', '')
        del submission_params['session']
        del submission_params['code_length']
        submission = TestSubmission.objects.create(**submission_params)
    else:
        submission = Submission.objects.create(**submission_params)
        submission_created_signal.send(sender=None, submission=submission)
        if submission.user and not settings.DEBUG:
            SubmissionService.upload_submission_to_s3(submission, async=False)

    judger = _get_judger(submission.language, is_test_submission)

    codetemplate = problem.get_codetemplate(language=submission.language)
    if codetemplate is None:
        return Response({'id': submission.id}, status=status.HTTP_404_NOT_FOUND)

    judge_params = {
        'submission_id': submission.id,
        'user_id': submission.user_id,
        'problem_id': submission.problem_id,
        'language': submission.language,
        'main_code': codetemplate.main,
        'solution_code': submission.code,
        'time_limit': problem.time_limit,
        'memory_limit': problem.memory_limit,
        'classname': codetemplate.classname,
        'common_code': codetemplate.common_code,
        'common_classname': codetemplate.common_classname,
        'secret_key': get_secret_key(submission.id),
        'created_at': utc_to_int(submission.created_at),
    }

    if is_test_submission:
        judge_params['input'] = submission.input
        judge_params['standard'] = codetemplate.standard
        judge_params['is_test_submission'] = True

    if settings.DEV:
        mock_judge(judge_params)
        return Response({'id': submission.id})

    judger.delay(judge_params)

    measure_manager.count('submission.submit',
                          tags={
                              'language': submission.language,
                              'is_test_submission': is_test_submission,
                              'problem_id': submission.problem_id,
                          },
                          fields={
                              'submission_id': submission.id,
                              'user_id': submission.user_id,
                          })

    return Response({'id': submission.id})
